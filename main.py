import subprocess
import time
import numpy as np
import cv2
from datetime import datetime
import threading

CLICK_POSITIONS = {
    'agree_button': (685, 310),  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏Å‡∏•‡∏á
    'allow_button': (631, 328),
    'sign_in_apple': (644, 425),
    'guest_button': (480, 490),  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Guest Sign In
    'check_box_1' : (931,134),
    'check_box_2' : (930,248),
    'check_box_3' : (928,326),
    'agree' : (428,403),
    'return' : (686,472),
    'login_with_guest' : (550, 404),
    'first_load_data' : (583, 509),
    'select_language' : (377, 260),
    'ok' : (478, 422),
    'create_name': (476, 405),
    'name_as': (556, 406),
    'complete_name': (481, 359),
    'skip': (773, 28),
    'start_btn_skip': (553, 361),
    'click' : (470, 268),
    'first_ranger': (276, 473),
    'second_ranger': (380, 476),
    'third_ranger': (481, 477),
    'fourth_ranger': (581, 473),
    'missile': (152, 465),
    'mineral' : (812, 471),
    'stage_mode': (480, 98),
    'select_stage_1': (679, 445),
    'start_stage'   :  (480, 476),
    'select_meteor' : (185, 359),
    'use_meteor' : (46, 46),
    'receive_level' : (475, 454),
    'gacha_btn' : (662, 115),
    'random' : (360, 450),
    'receive_character': (396, 440),
    'select_team': (187, 473),
    'team_save_btn': (550, 359),
    'load_resource': (475, 360),
    'load_additional_resource': (554, 385),
    'close_large_popup': (816, 60),
    'setting_btn': (847, 500),
    'account_menu': (708, 91),
    'account_setting': (566, 421),
    'delete_account_btn': (474, 263),
    'delete_left_side': (331, 346),
    'delete_valid_1' : (400, 428),
    'delete_valid_2' : (553, 429),
    'delete_valid_3' : (400, 428),
    'delete_valid_4' : (659, 430),
    'delete_account' : (475, 407),
    'load_login_completed'  : (44, 507),
    'load_tutorial_completed'  : (14, 526)

}

def check_special_days(date=None):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ‡πÄ‡∏™‡∏≤‡∏£‡πå, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if date is None:
        date = datetime.now()
    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ weekday (0 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, 1 = ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ..., 6 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
    weekday = date.weekday()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if weekday == 1:  # ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£
        return True, "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£"
    elif weekday == 5:  # ‡πÄ‡∏™‡∏≤‡∏£‡πå
        return True, "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"
    elif weekday == 6:  # ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
        return True, "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
    else:
        return False, "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ‡πÄ‡∏™‡∏≤‡∏£‡πå, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
    
def get_emulators():
    try:
        result = subprocess.check_output("adb devices", shell=True).decode()
        lines = result.strip().split("\n")[1:]
        emulators = [line.split()[0] for line in lines if "emulator" in line and "device" in line]
        return emulators
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á emulator: {e}")
        return []
# ‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏•‡∏±‡∏ö" (Back)

def press_back_button(device):
    print(f"üîô ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏ô {device}")
    adb_shell(device, "input keyevent 4")  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

def adb_shell(device, cmd):
    subprocess.run(f"adb -s {device} shell {cmd}", shell=True)

def click(device, x, y):
    adb_shell(device, f"input tap {x} {y}")
    
def click_with_delay(device, x, y, delay_after=1):
    print(f"üñ±Ô∏è [Device: {device}] ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà ({x}, {y}) - ‡∏£‡∏≠ {delay_after} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    click(device, x, y)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á
    time.sleep(delay_after)    

def screencap(device):
    cap1 = subprocess.check_output(f'adb -s {device} exec-out screencap -p', shell=True)
    image = np.frombuffer(cap1, dtype=np.uint8)
    img = cv2.imdecode(image, cv2.IMREAD_COLOR)
    return img

def check_app_status(device):
    result = subprocess.check_output(f"adb -s {device} shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'", shell=True).decode()
    if "com.linecorp.LGRGS" in result:
        print("‚úÖ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return True
    else:
        print("‚ùå ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return False
    
def check_pixel_color(device, x, y, expected_color, tolerance=10):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x,y)
    expected_color: (B, G, R)
    tolerance: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    """
    img = screencap(device)
    pixel = img[y, x]
    
    return (abs(pixel[0] - expected_color[0]) <= tolerance and
            abs(pixel[1] - expected_color[1]) <= tolerance and
            abs(pixel[2] - expected_color[2]) <= tolerance)

def wait_for_load(device, x, y, expected_color, timeout=60, interval=1):
    """
    ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x, y) ‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    - device: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå emulator
    - x, y: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    - expected_color: ‡∏Ñ‡πà‡∏≤ BGR ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (‡πÄ‡∏ä‡πà‡∏ô [255, 255, 255])
    - timeout: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠
    - interval: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        if check_pixel_color(device, x, y, expected_color):
            print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({x}, {y})")
            return True
        print(f"‚è≥ ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà ({x}, {y})...")
        time.sleep(interval)
    print(f"‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô {timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    return False

def delete_account(device):
    """‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüóëÔ∏è [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå...")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        click_with_delay(device, *CLICK_POSITIONS['setting_btn'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['account_menu'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['account_setting'], delay_after=5)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        click_with_delay(device, *CLICK_POSITIONS['delete_account_btn'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_left_side'], delay_after=5)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        click_with_delay(device, *CLICK_POSITIONS['delete_valid_1'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_valid_2'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_valid_3'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_valid_4'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_account'], delay_after=5)
        
        print(f"‚úÖ [Device: {device}] ‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
        
    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå: {e}")
        return False

def play_until_load_data(device):
    """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüéÆ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if not wait_for_load(device, *CLICK_POSITIONS['load_tutorial_completed'], expected_color=[57, 60, 66], timeout=60):
            print(f"üî¥ [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=2)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=10)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏ï‡∏à
        click_with_delay(device, *CLICK_POSITIONS['stage_mode'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['select_stage_1'], delay_after=10)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß
        for _ in range(5):
            click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=2)
        time.sleep(10)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÄ‡∏ï‡∏à
        click_with_delay(device, *CLICK_POSITIONS['start_stage'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['select_meteor'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['first_ranger'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['use_meteor'], delay_after=5)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π
        for _ in range(10):
            click_with_delay(device, *CLICK_POSITIONS['first_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['second_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['third_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['receive_level'], delay_after=5)
        
        for _ in range(4):
            click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=2)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏ä‡∏≤
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['gacha_btn'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['random'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=2)
        click_with_delay(device, *CLICK_POSITIONS['receive_character'], delay_after=10)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=10)
        click_with_delay(device, *CLICK_POSITIONS['select_team'], delay_after=10)
        
        for _ in range(4):
            click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=3)
        
        swipe_screen(device, 479, 204, 383, 436)
        time.sleep(10)
        swipe_screen(device, 110, 448, 482, 193)
        time.sleep(10)
        
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['team_save_btn'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        click_with_delay(device, *CLICK_POSITIONS['load_resource'], delay_after=20)
        click_with_delay(device, *CLICK_POSITIONS['load_additional_resource'], delay_after=5)
        
        print(f"‚úÖ [Device: {device}] ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        return True
        
    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°: {e}")
        return False
    
def login_with_guestID(device):
    """‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Guest ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞"""
    try:
        print(f"\nüîµ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        click_with_delay(device, *CLICK_POSITIONS['agree_button'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['allow_button'], delay_after=5)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        click_with_delay(device, *CLICK_POSITIONS['sign_in_apple'], delay_after=5)
        for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
            click_with_delay(device, *CLICK_POSITIONS[pos], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['agree'], delay_after=5)
        
        # ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        press_back_button(device)
        time.sleep(3)
        click_with_delay(device, *CLICK_POSITIONS['sign_in_apple'], delay_after=5)
        for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
            click_with_delay(device, *CLICK_POSITIONS[pos], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['agree'], delay_after=5)
        press_back_button(device)
        time.sleep(3)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Guest
        click_with_delay(device, *CLICK_POSITIONS['guest_button'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['login_with_guest'], delay_after=5)
        for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
            click_with_delay(device, *CLICK_POSITIONS[pos], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['agree'], delay_after=10)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        click_with_delay(device, *CLICK_POSITIONS['first_load_data'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['select_language'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['ok'], delay_after=40)
        click_with_delay(device, *CLICK_POSITIONS['create_name'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['name_as'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['complete_name'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
        
        print(f"üü¢ [Device: {device}] ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        return True
        
    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def play_tutorial(device):
    """‡πÄ‡∏•‡πà‡∏ô Tutorial ‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüéÆ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô Tutorial...")
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        if not wait_for_load(device, *CLICK_POSITIONS['load_login_completed'], expected_color=[0, 0, 0], timeout=60):
            print(f"üî¥ [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Tutorial")
            return False

        # 2. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        for _ in range(4):
            click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=1)

        # 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        click_with_delay(device, *CLICK_POSITIONS['first_ranger'], delay_after=2)
        click_with_delay(device, *CLICK_POSITIONS['second_ranger'], delay_after=2)
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=4)

        # 4. ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
        for _ in range(3):
            click_with_delay(device, *CLICK_POSITIONS['mineral'], delay_after=3)
        click_with_delay(device, *CLICK_POSITIONS['mineral'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=2)

        # 5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
        click_with_delay(device, *CLICK_POSITIONS['third_ranger'], delay_after=2)
        click_with_delay(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2)

        # 6. ‡πÉ‡∏ä‡πâ‡∏™‡∏Å‡∏¥‡∏•
        for _ in range(5):
            click_with_delay(device, *CLICK_POSITIONS['missile'], delay_after=2)

        # 7. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        for _ in range(10):
            click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=1)

        # 8. ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π
        for _ in range(25):
            click_with_delay(device, *CLICK_POSITIONS['third_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2)

        print(f"‚úÖ [Device: {device}] ‡πÄ‡∏•‡πà‡∏ô Tutorial ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        time.sleep(30)
        return True

    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô Tutorial: {e}")
        return False

def re_id(device):
    try:
        package = "com.linecorp.LGRGS"
        print(f"üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {device}")
        adb_shell(device, f"pm clear {package}")
        time.sleep(2)

        print(f"üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏° {device}")
        adb_shell(device, f"monkey -p {package} -c android.intent.category.LAUNCHER 1")
        time.sleep(10)
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÑ‡∏≠‡∏î‡∏µ {device}")

        login_with_guestID(device)
        play_tutorial(device)
        play_until_load_data(device)
        delete_account(device)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        img = screencap(device)
        cv2.imwrite(f"{device}_screenshot.jpg", img)
        print(f"‚úÖ ‡∏£‡∏µ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏™‡∏£‡πá‡∏à {device}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô re_id ‡∏ö‡∏ô {device}: {str(e)}")

def debug_pixel(device):
    print(f"\nüîç ‡πÄ‡∏£‡∏¥‡πà‡∏° Debug ‡∏Ñ‡πà‡∏≤ Pixel ‡∏ö‡∏ô {device}")
    
    # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ img ‡πÅ‡∏ö‡∏ö global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô mouse_callback
    img = screencap(device)
    
    # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡πÉ‡∏´‡πâ mouse_callback ‡∏ú‡πà‡∏≤‡∏ô param
    def mouse_callback(event, x, y, flags, param):
        img = param[0]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ img ‡∏à‡∏≤‡∏Å param[0]
        if event == cv2.EVENT_LBUTTONDOWN:
            pixel = img[y, x]
            print(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({x}, {y}) | ‡∏Ñ‡πà‡∏≤ BGR: {pixel}")
            print(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: 'new_position': ({x}, {y})")
            
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
            img = screencap(device)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï param ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
            param[0] = img

    cv2.namedWindow('Debug Pixel', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('Debug Pixel', 800, 600)
    
    # ‡πÉ‡∏ä‡πâ param ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ mouse_callback
    cv2.setMouseCallback('Debug Pixel', mouse_callback, param=[img])
    
    while True:
        cv2.imshow('Debug Pixel', img)
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
    
    cv2.destroyAllWindows()
    print(f"üîö ‡∏à‡∏ö‡∏Å‡∏≤‡∏£ Debug ‡∏ö‡∏ô {device}")


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
def swipe_screen(device, start_x, start_y, end_x, end_y, duration=1000):
    print(f"üñ±Ô∏è ‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏≤‡∏Å ({start_x}, {start_y}) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ({end_x}, {end_y}) ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {duration} ms")
    adb_shell(device, f"input swipe {start_x} {start_y} {end_x} {end_y} {duration}")
    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à

def monitor_app_loop(interval_sec=90):
    print("üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏õ‡∏ó‡∏∏‡∏Å‡πÜ", interval_sec, "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    while True:
        emulators = get_emulators()
        for device in emulators:
            print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏õ‡∏ö‡∏ô {device}")
            if not check_app_status(device):
                print(f"üîÅ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ {device} ‡∏î‡πâ‡∏ß‡∏¢ run_all()")
                run_all()
        time.sleep(interval_sec)

def run_all_independent():
    """‡∏£‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
    emulators = get_emulators()
    if not emulators:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Emulator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
        return
    
    threads = []
    for device in emulators:
        thread = threading.Thread(
            target=process_device_independent, 
            args=(device,),
            name=f"Thread-{device}"
        )
        threads.append(thread)
        thread.start()
        time.sleep(1)  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô {len(emulators)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á...")

def process_device_independent(device):
    """‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞"""
    try:
        print(f"\n‚öôÔ∏è [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
        re_id(device)
    except Exception as e:
        print(f"‚ùå [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
if __name__ == "__main__":
    print("=== LRG Auto Re-ID Bot ===")
    print("1. ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)")
    print("2. Debug ‡∏Ñ‡πà‡∏≤ Pixel")
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î: ")
    
    if choice == "1":
        while True:
            run_all_independent()  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞
            print("\nüïì ‡∏£‡∏≠ 90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")
            time.sleep(90)
    elif choice == "2":
        emulators = get_emulators()
        if not emulators:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö Emulator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
        else:
            print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Emulator ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug:")
            for i, emu in enumerate(emulators, 1):
                print(f"{i}. {emu}")
            emu_choice = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ")) - 1
            debug_pixel(emulators[emu_choice])
    elif choice == "3":
        print("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        for name, pos in CLICK_POSITIONS.items():
            print(f"{name}: {pos}")