import subprocess
import time
import numpy as np
import cv2
from datetime import datetime
import threading
import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
import math
import os
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
from PIL import Image
from tkinter import font as tkfont

monitoring_active = True  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
isLoadResource = True
running = False
summon_times = 0
running = False
target_characters = []
choice = '1'
excluded_devices = []
skip_7days = False
random_summon = True
delay = 3
select_gacha_number = ['common','rate-up(1)','rate-up(2)']
isFirstTime  = True
isFound = False

CLICK_POSITIONS = {
    'agree_button': (685, 310),  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏Å‡∏•‡∏á
    'allow_button': (631, 328),
    'sign_in_apple': (642, 425),
    'guest_button': (568, 498),
    'check_box_1' : (931,134),
    'check_box_2' : (930,248),
    'check_box_3' : (928,326),
    'agree' : (430, 404),
    'return' : (686,472),
    'login_with_guest' : (550, 404),
    'first_load_data' : (606, 516),
    'select_language' : (362, 262),
    'ok' : (522, 425),
    'create_name': (476, 405),
    'name_as': (601, 407),
    'complete_name': (529, 361),
    'skip': (773, 27),
    'start_btn_skip': (595, 370),
    'click' : (470, 268),
    'first_ranger': (292, 477),
    'second_ranger': (382, 486),
    'third_ranger': (488, 479),
    'fourth_ranger': (583, 475),
    'missile': (152, 465),
    'missile_common': (154, 462),
    'mineral' : (811, 461),
    'stage_mode': (481, 79),
    'select_stage_1': (486, 480),
    'select_stage_1_tutorial': (686, 449),
    'select_stage_2': (478, 266),
    'start_stage'   :  (478, 94),
    'start_stage_1_tutorial': (592, 476),
    'used_meteor_tutorial' : (44, 56), 
    'select_meteor' : (185, 359),  
    'use_meteor' : (46, 46),
    'receive_level' : (475, 454),
    'gacha_btn' : (662, 115),
    'random_character' : (360, 450),
    'confirm_random_character' : (554, 406),
    'receive_character': (353, 437),
    'select_team': (187, 473),
    'team_save_btn': (550, 359),
    'load_resource': (475, 360),
    'load_additional_resource': (595, 386),
    'close_large_popup': (816, 60),
    'close_medium_popup': (859, 36),
    'close_small_popup' : (816, 39),
    'setting_btn': (847, 500),
    'account_menu': (708, 91),
    'account_setting': (566, 421),
    'delete_account_btn': (594, 264),
    'delete_left_side': (331, 346),
    'delete_valid_1' : (353, 428),
    'delete_valid_2' : (588, 428), 
    'delete_valid_3' : (353, 428),
    'delete_valid_4' : (630, 428), 
    'delete_account' : (648, 425),
    'deleted_success' : (515, 400),
    'load_login_completed'  : (44, 507),
    'load_tutorial_completed' : (14, 526),
    'load_resource_completed' : (143, 416), 
    'load_game_with_ticket' : (246, 439),
    'load_game_with_calendar' : (360, 346),
    'load_gacha_page_success' : (151, 386),
    'load_stage' : (40, 515),
    'play_stage_success': (143, 490),
    'close_popup_completed' : (544, 286), 
    'slot' : (475, 454),
    'open_teasure': (442, 143),
    'receive_ticket': (476, 418),
    'enter_7days' : (902, 240),
    'receive_7days_ticket' : (336, 445),
    'receive_7days_ticket_success' : (486, 408),
    'open_gift_box' : (764, 463),
    'receive_all_btn' : (774, 465) ,
    'receive_all' : (589, 359),
    'receive_all_success' : (516, 355),
    'close_7days_popup' : (840, 37) ,
    'back_btn' : (31, 27),
    'close_calendar': (812, 61),
    'is_black_screen': (812, 61),
    'click_ticket' : (478, 417),
    'random_character_gacha' : (188, 440),
    'confirm_random_gacha' : (606, 405),
    'select_eng_lang' : (606, 405) ,
    'is_gray_screen' : (674, 417) ,
    'is_network_lost': (522, 362) ,
    'close_largest_popup': (928, 30),
    'close_show_event' : (859, 36),
    'select_first_gacha' : (835, 177),
    'select_second_gacha' : (827, 313),
    'select_third_gacha' : (833, 441),
    'close_buff_event' : (814, 37) ,
    'close_gift_popup' : (803,33),
}
# process
def get_emulators():
    """Get list of connected emulators excluding excluded_devices"""
    try:
        result = subprocess.check_output("adb devices", shell=True).decode()
        lines = result.strip().split("\n")[1:]
        emulators = [line.split()[0] for line in lines 
                    if "emulator" in line and "device" in line
                    and line.split()[0] not in excluded_devices]
        return emulators
    except subprocess.CalledProcessError as e:
        log(f"‚ùå Failed to get emulators: {str(e)}")
        return []

def run_all_independent():
    """‡∏£‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞"""
    emulators = get_emulators()
    if not emulators:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Emulator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
        return
    
    threads = []
    for device in emulators:
        thread = threading.Thread(
            target=re_id,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å run_with_monitoring ‡πÄ‡∏õ‡πá‡∏ô re_id ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            args=(device,True),
            name=f"Thread-{device}"
        )
        threads.append(thread)
        thread.start()
        time.sleep(5)  
    
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô {len(emulators)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ò‡∏£‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    for thread in threads:
        thread.join()

def process_device_independent(device):
    """‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞"""
    try:
        print(f"\n‚öôÔ∏è [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
        re_id(device,True)
    except Exception as e:
        print(f"‚ùå [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def adb_shell(device, command):
    return os.system(f"adb -s {device} shell {command}")
# main feature
def re_id(device, isFirstTime=True,max_retries=5, current_retry=0):

    if current_retry >= max_retries:
        print(f"‚ùå ‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß {device}")
        return False
     
    flag = 1
    if choice == '1':
        try:
            package = "com.linecorp.LGRGS"
            if isFirstTime:
                print(f"üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {device}")
                adb_shell(device, f"pm clear {package}")
                time.sleep(2)
            print(f"üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏° {device}")
            adb_shell(device, f"monkey -p {package} -c android.intent.category.LAUNCHER 1")
            print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÑ‡∏≠‡∏î‡∏µ {device}")
            if isFirstTime:
                login_with_guestID(device,isFirstTime = True)
            else :
                login_with_guestID(device,isFirstTime = False)
            play_tutorial(device)
            play_until_load_data(device)
            if check_special_days()[0]:
                close_popup(device, flag)
            else:
                play_until_level_3(device)
            receive_7days(device)
            print(isFound,isFirstTime)
            if summon_times > 0:
                summon_rangers(device, summon_times)
                log(f"üéØ ‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {summon_times} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

            print(f"‚úÖ ‡∏£‡∏µ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏™‡∏£‡πá‡∏à {device} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÉ‡∏´‡∏°‡πà")
            if not isFound:
                delete_account(device)
                return re_id(device, isFirstTime=False, max_retries=max_retries, current_retry=current_retry+1)
            else:
                return True  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô re_id ‡∏ö‡∏ô {device}: {str(e)}")
            return re_id(device, isFirstTime, max_retries, current_retry+1)
    else:
        debug_pixel(device)
        return False

def delete_account(device):
    """‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüóëÔ∏è [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå...")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        click_with_delayV2(device, *CLICK_POSITIONS['setting_btn'], delay_after=delay,expected_color=[140, 138, 156])
        click_with_delayV2(device, *CLICK_POSITIONS['account_menu'], delay_after=delay,expected_color=[ 33,  69, 140])
        click_with_delayV2(device, *CLICK_POSITIONS['account_setting'], delay_after=10,expected_color= [165, 178, 206])
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        click_with_delay(device, *CLICK_POSITIONS['delete_account_btn'], delay_after=delay)
        click_with_delayV2(device, *CLICK_POSITIONS['delete_left_side'], delay_after=delay,expected_color= [33, 69, 140])

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        click_with_delayV2(device, *CLICK_POSITIONS['delete_valid_1'], delay_after=delay,expected_color=[49, 195,0])
        click_with_delayV2(device, *CLICK_POSITIONS['delete_valid_2'], delay_after=delay,expected_color=[ 49, 195, 0])
        click_with_delayV2(device, *CLICK_POSITIONS['delete_valid_3'], delay_after=delay,expected_color=[49, 195,0])
        click_with_delay(device, *CLICK_POSITIONS['delete_valid_4'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['delete_account'], delay_after=delay )
        click_with_delayV2(device, *CLICK_POSITIONS['deleted_success'], delay_after=delay,expected_color=  [ 49, 195, 0])

      
        print(f"‚úÖ [Device: {device}] ‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        return True
        
    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡πÅ‡∏≠‡∏Ñ‡πÄ‡∏Ñ‡∏≤‡∏ó‡πå: {e}")
        return False

def play_until_load_data(device):
    """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüéÆ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à...")

        for _ in range(4):
            click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=3)
            click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=3)

        if not wait_for_load(device, *CLICK_POSITIONS['load_tutorial_completed'], expected_color=[57, 60, 66], timeout=90):
            print(f"üî¥ [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            return False


        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏ï‡∏à
        click_with_delayV2(device, *CLICK_POSITIONS['stage_mode'], delay_after=10,expected_color=[49, 60, 66])
        click_with_delayV2(device, *CLICK_POSITIONS['select_stage_1_tutorial'], delay_after=10,expected_color= [107, 215, 247])

        for _ in range(5):
            click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=2)
        

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÄ‡∏ï‡∏à
        click_with_delayV2(device, *CLICK_POSITIONS['select_meteor'], delay_after=2,expected_color=[156, 190, 198])
        click_with_delayV2(device, *CLICK_POSITIONS['start_stage_1_tutorial'], delay_after=2,expected_color=[ 49, 195, 0])

        click_with_delayV2(device, *CLICK_POSITIONS['third_ranger'], delay_after=1)
        click_with_delayV2(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=1)

        for _ in range(6):
            click_with_delay(device, *CLICK_POSITIONS['used_meteor_tutorial'], delay_after=3)

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π
        for _ in range(12):
            click_with_delayV2(device, *CLICK_POSITIONS['first_ranger'], delay_after=2)
            click_with_delayV2(device, *CLICK_POSITIONS['second_ranger'], delay_after=2)
            click_with_delayV2(device, *CLICK_POSITIONS['third_ranger'], delay_after=2)
            click_with_delayV2(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        for _ in range(5):
             click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=3)
       
        click_with_delayV2(device, *CLICK_POSITIONS['receive_level'], delay_after=5)

        for _ in range(5):
            click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=2)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏ä‡∏≤
        click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=3)
        click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=3)
        click_with_delayV2(device, *CLICK_POSITIONS['gacha_btn'], delay_after=3,expected_color=[189, 178,189])
        click_with_delayV2(device, *CLICK_POSITIONS['random_character'], delay_after=3,expected_color= [ 66,255, 255])
        click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=2)
        click_with_delayV2(device, *CLICK_POSITIONS['receive_character'], delay_after=3,expected_color=[ 49, 195,  0])
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=3,)
        click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=3,)
        click_with_delayV2(device, *CLICK_POSITIONS['select_team'], delay_after=3,expected_color=[  0, 109, 198])
        
        for _ in range(4):
            click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=3)
        
        swipe_screen(device, 479, 204, 383, 436)
        time.sleep(10)
        swipe_screen(device, 110, 448, 482, 193)
        time.sleep(10)
        
        click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=3,)
        click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=3,)
        click_with_delayV2(device, *CLICK_POSITIONS['team_save_btn'], delay_after=3,expected_color=[255, 255, 255])
      

        for _ in range(4):
            click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=3)
            click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=3)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        click_with_delayV2(device, *CLICK_POSITIONS['load_resource'], delay_after=10,expected_color=[255,255, 255])
        click_with_delayV2(device, *CLICK_POSITIONS['load_additional_resource'], delay_after=5,expected_color=[ 49 ,195,   0])
        time.sleep(60)
        print(f"‚úÖ [Device: {device}] ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        return True
        
    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°: {e}")
        return False
    
def login_with_guestID(device,isFirstTime = True):
    """‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Guest ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¥‡∏™‡∏£‡∏∞"""
    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            print(f"\nüîµ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {retry_count + 1})...")
            time.sleep(10)

            if not isFirstTime:
                restart_game(device)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏ó‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
            if check_pixel_color(device, *CLICK_POSITIONS['is_gray_screen'], [48, 48, 48], tolerance=5):
                print(f"‚ö†Ô∏è [Device: {device}] ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏à‡∏≠‡πÄ‡∏ó‡∏≤! ‡∏à‡∏∞‡∏£‡∏µ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                restart_game(device)
                retry_count += 1
                time.sleep(10)
                continue

            if isFirstTime:
                click_with_delayV2(device, *CLICK_POSITIONS['agree_button'], delay_after=delay, expected_color=[66,66,66])
                click_with_delayV2(device, *CLICK_POSITIONS['allow_button'], delay_after=delay, expected_color=[255,255,255])
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡πÄ‡∏ó‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
            if check_pixel_color(device, 674, 417, [48, 48, 48], tolerance=5):
                print(f"‚ö†Ô∏è [Device: {device}] ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏à‡∏≠‡πÄ‡∏ó‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å! ‡∏à‡∏∞‡∏£‡∏µ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                restart_game(device)
                retry_count += 1
                time.sleep(10)
                continue
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
            click_with_delayV2(device, *CLICK_POSITIONS['sign_in_apple'], delay_after=10, expected_color=[0,0,0])

            for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
                click_with_delayV2(device, *CLICK_POSITIONS[pos], delay_after=delay, expected_color=[255,255,255])

            click_with_delayV2(device, *CLICK_POSITIONS['agree'], delay_after=delay, expected_color=[202, 241, 202])
            
            press_back_button(device)
            time.sleep(3)

            click_with_delayV2(device, *CLICK_POSITIONS['sign_in_apple'], delay_after=10, expected_color=[0,0,0])
            for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
                click_with_delayV2(device, *CLICK_POSITIONS[pos], delay_after=delay, expected_color=[255,255,255])

            click_with_delayV2(device, *CLICK_POSITIONS['agree'], delay_after=delay, expected_color=[202, 241, 202])
            press_back_button(device)
            time.sleep(3)
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Guest
            click_with_delayV2(device, *CLICK_POSITIONS['guest_button'], delay_after=10, expected_color=[66, 48, 49])
            click_with_delayV2(device, *CLICK_POSITIONS['login_with_guest'], delay_after=10, expected_color=[250,250, 250])
            for pos in ['check_box_1', 'check_box_2', 'check_box_3']:
                click_with_delayV2(device, *CLICK_POSITIONS[pos], delay_after=delay, expected_color=[255,255,255])

            click_with_delayV2(device, *CLICK_POSITIONS['agree'], delay_after=10, expected_color=[202, 241, 202])
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            click_with_delayV2(device, *CLICK_POSITIONS['first_load_data'], delay_after=delay, expected_color=[ 10, 196,  67])
            click_with_delayV2(device, *CLICK_POSITIONS['ok'], delay_after=30, expected_color=[49, 195, 0])
            click_with_delayV2(device, *CLICK_POSITIONS['create_name'], delay_after=delay, expected_color=[255, 255, 255])
            click_with_delayV2(device, *CLICK_POSITIONS['name_as'], delay_after=delay, expected_color=[ 49,195,0])
            click_with_delayV2(device, *CLICK_POSITIONS['complete_name'], delay_after=delay, expected_color=[49,195,0])
            click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=delay)
            click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=delay)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if not check_pixel_color(device, 674, 417, [48, 48, 48], tolerance=5):
                print(f"üü¢ [Device: {device}] ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                return True
            else:
                print(f"‚ö†Ô∏è [Device: {device}] ‡∏¢‡∏±‡∏á‡∏û‡∏ö‡∏à‡∏≠‡πÄ‡∏ó‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
                retry_count += 1
                
        except Exception as e:
            print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏û‡∏•‡∏≤‡∏î: {e}")
            retry_count += 1
            restart_game(device)
            time.sleep(10)
    
    print(f"‚ùå [Device: {device}] ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á {max_retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return False

def play_tutorial(device):
    """‡πÄ‡∏•‡πà‡∏ô Tutorial ‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    try:
        print(f"\nüéÆ [Device: {device}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô Tutorial...")
        
      
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        if not wait_for_load(device, *CLICK_POSITIONS['load_login_completed'], expected_color=[0, 0, 0], timeout=90):
            print(f"üî¥ [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Tutorial")
            return False

        # 2. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        for _ in range(4):
            click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=2)

        # 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        click_with_delayV2(device, *CLICK_POSITIONS['first_ranger'], delay_after=2,expected_color=[ 16, 158, 239])
        click_with_delayV2(device, *CLICK_POSITIONS['second_ranger'], delay_after=2,expected_color=[255, 255, 255])
        click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=4)

        # 4. ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
        for _ in range(3):
            click_with_delayV2(device, *CLICK_POSITIONS['mineral'], delay_after=delay,expected_color=[ 189, 154,  16])

        click_with_delayV2(device, *CLICK_POSITIONS['mineral'], delay_after=delay,expected_color=[ 189, 154,  16])
        click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=5)
        click_with_delay(device, *CLICK_POSITIONS['missile_common'], delay_after=2)

        for _ in range(5):
            click_with_delay(device, *CLICK_POSITIONS['missile_common'], delay_after=2)

        # 5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
        click_with_delayV2(device, *CLICK_POSITIONS['third_ranger'], delay_after=2,expected_color=[255, 195,  90])
        click_with_delayV2(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2,expected_color=[49, 44, 49])

        # 6. ‡πÉ‡∏ä‡πâ‡∏™‡∏Å‡∏¥‡∏•
        for _ in range(5):
            click_with_delayV2(device, *CLICK_POSITIONS['missile'], delay_after=2)

        # 7. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        for _ in range(10):
            click_with_delayV2(device, *CLICK_POSITIONS['click'], delay_after=1)

        # 8. ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π
        for _ in range(15):
            click_with_delayV2(device, *CLICK_POSITIONS['third_ranger'], delay_after=delay)
            click_with_delayV2(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=delay)

        click_with_delayV2(device, *CLICK_POSITIONS['skip'], delay_after=5)
        click_with_delayV2(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
        print(f"‚úÖ [Device: {device}] ‡πÄ‡∏•‡πà‡∏ô Tutorial ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return True

    except Exception as e:
        print(f"üî¥ [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô Tutorial: {e}")
        return False

def play_until_level_3(device):
  
    for _ in range(3):
        click_with_delay(device, *CLICK_POSITIONS['close_calendar'], delay_after=5)


    click_with_delay(device, *CLICK_POSITIONS['stage_mode'], delay_after=5)
    click_with_delay(device, *CLICK_POSITIONS['select_stage_2'], delay_after=5)
    click_with_delay(device, *CLICK_POSITIONS['start_stage'], delay_after=5)
    click_with_delay(device, *CLICK_POSITIONS['use_meteor'], delay_after=5)

    for _ in range(5):
            click_with_delay(device, *CLICK_POSITIONS['first_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['second_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['third_ranger'], delay_after=2)
            click_with_delay(device, *CLICK_POSITIONS['fourth_ranger'], delay_after=2)


    for _ in range(2):
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=5)

    click_with_delay(device, *CLICK_POSITIONS['receive_level'], delay_after=7)

    for _ in range(4):
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=2)

    for _ in range(3):
        click_with_delay(device, *CLICK_POSITIONS['slot'], delay_after=2)    

    click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=5)

    click_with_delay(device, *CLICK_POSITIONS['skip'], delay_after=5)
    click_with_delay(device, *CLICK_POSITIONS['start_btn_skip'], delay_after=5)
    click_with_delay(device, *CLICK_POSITIONS['stage_mode'], delay_after=12)
    click_with_delay(device, *CLICK_POSITIONS['open_teasure'], delay_after=5)

    for _ in range(3):
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=5)
    restart_all_emulators()
    close_popup(device,1)

def receive_7days(device):
    if not wait_for_load(device, *CLICK_POSITIONS['load_resource_completed'], expected_color=[24, 211, 255], timeout=180):
            print(f"üî¥ [Device: {device}] ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            return False
    click_with_delayV2(device, *CLICK_POSITIONS['enter_7days'], delay_after=delay,expected_color=[255, 251, 255])
    click_with_delayV2(device, *CLICK_POSITIONS['receive_7days_ticket'], delay_after=delay,expected_color=[239, 203, 156])
    click_with_delayV2(device, *CLICK_POSITIONS['receive_7days_ticket_success'], delay_after=delay,expected_color=[ 255, 255 , 255])
    click_with_delayV2(device, *CLICK_POSITIONS['close_7days_popup'], delay_after=delay,expected_color=[0, 0, 0])
    click_with_delayV2(device, *CLICK_POSITIONS['open_gift_box'], delay_after=delay,expected_color=[ 33,   8, 165])
    click_with_delayV2(device, *CLICK_POSITIONS['receive_all_btn'], delay_after=delay,expected_color=[ 24, 215, 255])
    click_with_delayV2(device, *CLICK_POSITIONS['receive_all'], delay_after=delay,expected_color= [49, 195, 0])
    click_with_delayV2(device, *CLICK_POSITIONS['receive_all_success'], delay_after=delay,expected_color=[49, 195, 0])

    click_with_delayV2(device, *CLICK_POSITIONS['close_gift_popup'], delay_after=delay,expected_color=[0, 0, 0])

def close_popup(device,flag):
    if flag == 1:
        if not wait_for_load(device, *CLICK_POSITIONS['load_game_with_calendar'], expected_color=[198,227, 247], timeout=180):
                    print(f"üî¥ [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Calendar")
                    return False
    print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏¥‡∏î popup")
    click_with_delay(device, *CLICK_POSITIONS['close_calendar'], delay_after=delay)
    for _ in range(10):
        click_with_delay(device, *CLICK_POSITIONS['receive_ticket'], delay_after=delay)
    for _ in range(15):
        click_with_delay(device, *CLICK_POSITIONS['close_medium_popup'], delay_after=1)
        click_with_delay(device, *CLICK_POSITIONS['click_ticket'], delay_after=1)

    click_with_delayV2(device, *CLICK_POSITIONS['close_largest_popup'], delay_after=delay,expected_color=[11, 42, 96])
    click_with_delayV2(device, *CLICK_POSITIONS['close_show_event'], delay_after=delay,expected_color=[0, 0, 0])

    if flag == 1:
        click_with_delayV2(device, *CLICK_POSITIONS['stage_mode'], delay_after=15,expected_color=[49, 60, 66])
        click_with_delayV2(device, *CLICK_POSITIONS['back_btn'], delay_after=5,)

    click_with_delayV2(device, *CLICK_POSITIONS['close_buff_event'], delay_after=delay,expected_color=[0, 0, 0])

def detect_error_messages(device):
    """Detect specific error messages using OCR and handle them"""
    try:
        img = screencap(device)
        if img is None:
            return False
            
        screenshot_path = f"{device}_error_check.png"
        success = cv2.imwrite(screenshot_path, img)
        if not success:
            log(f"‚ö†Ô∏è {device}: Failed to save screenshot.")
            return False

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        time.sleep(5)  # ‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡πÑ‡∏î‡πâ

        # OCR
        text = pytesseract.image_to_string(Image.open(screenshot_path), lang='eng')
        text = text.lower()

        error_messages = [
            "you must agree to the terms and conditions in order to play the game.",
            "authentication failed. please try again",
            "you must be connected to the internet",
            "unstable network connection do you want to retry?",  # lowercase ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
        ]

        for message in error_messages:
            if message in text:
                log(f"‚ö†Ô∏è {device}: Detected error message - '{message}'")
                return True
                
        return False
    except Exception as e:
        log(f"‚ö†Ô∏è {device}: Error detection failed: {str(e)}")
        return False

def is_black_screen(device):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        img = screencap(device)
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ß‡πà‡∏≤‡∏î‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        positions = [
            (100, 100), (200, 200), (300, 300), 
            (400, 400), (500, 500), (530, 530)
        ]
        
        for x, y in positions:
            pixel = img[y, x]
            # ‡∏ñ‡πâ‡∏≤‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏î‡∏≥ (BGR ‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ 0 ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏Ñ‡πà‡∏≤)
            if not (pixel[0] < 10 and pixel[1] < 10 and pixel[2] < 10):
                return False
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡∏≥: {e}")
        return False

def monitor_devices():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏∏‡∏Å‡πÜ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö error, ‡∏à‡∏≠‡∏î‡∏≥ ‡πÅ‡∏•‡∏∞ network"""
    global monitoring_active
    log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°...")

    while True:
        emulators = get_emulators()
        if not emulators:
            log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            time.sleep(30)
            continue

        for device in emulators:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
                if detect_error_messages(device):
                    log(f"‚ö†Ô∏è {device}: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó")
                    restart_with_clean(device)
                    continue

            except Exception as e:
                log(f"‚ö†Ô∏è {device}: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {str(e)}")

        time.sleep(10)

def check_app_status(device):
    result = subprocess.check_output(f"adb -s {device} shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'", shell=True).decode()
    if "com.linecorp.LGRGS" in result:
        print("‚úÖ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return True
    else:
        print("‚ùå ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return False
    
# summon rangers
def check_target_character(device):
    img = screencap(device)
    screenshot_path = f"{device}_check.png"
    cv2.imwrite(screenshot_path, img)

    text = pytesseract.image_to_string(Image.open(screenshot_path), lang='tha+eng')
    print(f"üîç OCR ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}")

    for target in target_characters:
        if target.lower() in text.lower():
            print(f"üéâ ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target}")
            return target
        
    return None

def summon_rangers(device, round):
    click_with_delayV2(device, *CLICK_POSITIONS['gacha_btn'], delay_after=5, expected_color=[189, 178, 189])
    global isFound
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ gacha ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    if not wait_for_load(device, *CLICK_POSITIONS['load_gacha_page_success'], expected_color=[107, 36, 107], timeout=60):
        print(f"üî¥ [Device: {device}] ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏ä‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return False
    

    click_with_delayV2(device, *CLICK_POSITIONS['select_second_gacha'], delay_after=5, expected_color=[132, 36, 140])

    for i in range(round):
        print(f"\nüîÅ [Device: {device}] ‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i+1}/{round}")
        
        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô
        click_with_delayV2(device, *CLICK_POSITIONS['random_character_gacha'], delay_after=5, expected_color=[222, 255, 255])
        click_with_delayV2(device, *CLICK_POSITIONS['confirm_random_gacha'], delay_after=5, expected_color=[49, 195, 0])
        click_with_delay(device, *CLICK_POSITIONS['click'], delay_after=1)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ animation ‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        time.sleep(5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ animation ‡πÄ‡∏™‡∏£‡πá‡∏à
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        found_char = None
        retry_count = 0
        max_retries = 3
        
        while retry_count < max_retries and not found_char:
            print(f"üîÑ [Device: {device}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà {retry_count+1})")
            found_char = check_target_character(device)
            
            if not found_char:
                retry_count += 1
                time.sleep(3)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        
        if found_char:
            log(f"üéØ [Device: {device}] ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {found_char} ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö {i+1}")
            isFound = True
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå
            target_dir = save_directory_path.get()
            if target_dir:
                save_pref_file(device, found_char=found_char, target_dir=target_dir)
            else:
                log("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if messagebox.askyesno("‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£", f"‡∏û‡∏ö {found_char} ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
                continue
            else:
                break
        else:
            print(f"üîç [Device: {device}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
        
        # ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        click_with_delayV2(device, *CLICK_POSITIONS['receive_character'], delay_after=3)
        time.sleep(2)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ

    # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    click_with_delayV2(device, *CLICK_POSITIONS['back_btn'], delay_after=5)
    log(f"‚úÖ [Device: {device}] ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

def save_pref_file(device, found_char=None, target_dir=None):
    try:
        if not target_dir:
            messagebox.showwarning("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô", "‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå")
            return

        android_path = "/data/data/com.linecorp.LGRGS/shared_prefs/_LINE_COCOS_PREF_KEY.xml"
        local_tmp_path = os.path.join(os.getcwd(), "_LINE_COCOS_PREF_KEY.xml")

        # ‚úÖ ROOT ‡∏Å‡πà‡∏≠‡∏ô (‡∏ö‡∏≤‡∏á emulator ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)
        print("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° root...")
        os.system(f"adb -s {device} root")
        os.system(f"adb -s {device} remount")  # ‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á remount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ writable

        # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á permission ‡∏î‡πâ‡∏ß‡∏¢ su
        print("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á permission ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå...")
        adb_shell(device, f"su -c 'chmod 777 \"{android_path}\"'")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå
        print("üì• ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå...")
        pull_result = os.system(f"adb -s {device} pull \"{android_path}\" \"{local_tmp_path}\"")

        if pull_result != 0 or not os.path.exists(local_tmp_path):
            messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            return

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        if found_char:
            clean_char_name = ''.join(e for e in found_char if e.isalnum())
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            target_filename = f"{clean_char_name}_{timestamp}_LINE_COCOS_PREF_KEY.xml"
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            target_filename = f"pref_{timestamp}_LINE_COCOS_PREF_KEY.xml"

        target_path = os.path.join(target_dir, target_filename)
        count = 1
        while os.path.exists(target_path):
            if found_char:
                target_filename = f"{clean_char_name}_{count}_LINE_COCOS_PREF_KEY.xml"
            else:
                target_filename = f"pref_{timestamp}_{count}_LINE_COCOS_PREF_KEY.xml"
            target_path = os.path.join(target_dir, target_filename)
            count += 1

        # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        os.replace(local_tmp_path, target_path)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà:\n{target_path}")
        print(f"üíæ ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {target_filename}")

    except Exception as e:
        messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå: {e}")

# click && swipe
def click_with_delayV2(device, x, y, delay_after=1, expected_color=None, timeout=180):
    try:
        if expected_color is not None:
            if not wait_for_load(device, x, y, expected_color, timeout):
                print(f"‚ùå ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà ({x}, {y}) - ‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á")
                return False
        
        click(device, x, y)
        time.sleep(delay_after)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å: {str(e)}")
        return False

def click(device, x, y):
    log(f"üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á{x} {y} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå {device}")
    adb_shell(device, f"input tap {x} {y}")
    
def click_with_delay(device, x, y, delay_after=1):
    print(f"üñ±Ô∏è [Device: {device}] ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà ({x}, {y}) - ‡∏£‡∏≠ {delay_after} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    click(device, x, y)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á
    time.sleep(delay_after)    

def swipe_screen(device, start_x, start_y, end_x, end_y, duration=1000):
    print(f"üñ±Ô∏è ‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏≤‡∏Å ({start_x}, {start_y}) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ({end_x}, {end_y}) ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {duration} ms")
    adb_shell(device, f"input swipe {start_x} {start_y} {end_x} {end_y} {duration}")
    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à

  
def press_back_button(device):
    print(f"üîô ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏ô {device}")
    adb_shell(device, "input keyevent 4")  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

def screencap(device):
    cap1 = subprocess.check_output(f'adb -s {device} exec-out screencap -p', shell=True)
    image = np.frombuffer(cap1, dtype=np.uint8)
    img = cv2.imdecode(image, cv2.IMREAD_COLOR)
    return img

# check
def wait_for_event(device, condition_func, timeout=60, interval=1, *args, **kwargs):
    """
    ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ condition_func ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True
    *args ‡πÅ‡∏•‡∏∞ **kwargs ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ condition_func
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        if condition_func(device, *args, **kwargs):
            return True
        time.sleep(interval)
    return False

def check_special_days(date=None):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ‡πÄ‡∏™‡∏≤‡∏£‡πå, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if date is None:
        date = datetime.now()
    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ weekday (0 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, 1 = ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ..., 6 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
    weekday = date.weekday()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if weekday == 1:  # ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£
        return True, "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£"
    elif weekday == 5:  # ‡πÄ‡∏™‡∏≤‡∏£‡πå
        return True, "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"
    elif weekday == 6:  # ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
        return True, "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
    else:
        return False, "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£, ‡πÄ‡∏™‡∏≤‡∏£‡πå, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"

def check_pixel_color(device, x, y, expected_color, tolerance=10):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x,y)
    expected_color: (B, G, R)
    tolerance: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    """
    img = screencap(device)
    pixel = img[y, x]
    
    return abs(int(pixel[0]) - int(expected_color[0])) <= tolerance and \
           abs(int(pixel[1]) - int(expected_color[1])) <= tolerance and \
           abs(int(pixel[2]) - int(expected_color[2])) <= tolerance

def wait_for_load(device, x, y, expected_color, timeout=60, interval=1):
    """
    ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x, y) ‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    - device: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå emulator
    - x, y: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    - expected_color: ‡∏Ñ‡πà‡∏≤ BGR ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (‡πÄ‡∏ä‡πà‡∏ô [255, 255, 255])
    - timeout: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠
    - interval: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        if check_pixel_color(device, x, y, expected_color):
            print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({x}, {y})")
            return True
        print(f"‚è≥ ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà ({x}, {y})...")
        time.sleep(interval)
    print(f"‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô {timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    return False

# restart
def restart_game(device):
    """
    ‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
    - device: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå emulator
    """
    try:
        print(f"\nüîÑ [Device: {device}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà...")
        
        # 1. ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏°
        print(f"‚èπ [Device: {device}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÄ‡∏Å‡∏°...")
        adb_shell(device, "am force-stop com.linecorp.LGRGS")
        time.sleep(3)
        
        # 2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        print(f"üöÄ [Device: {device}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà...")
        adb_shell(device, "monkey -p com.linecorp.LGRGS -c android.intent.category.LAUNCHER 1")
        time.sleep(15)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡πÇ‡∏´‡∏•‡∏î
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß
        if check_app_status(device):
            print(f"‚úÖ [Device: {device}] ‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        else:
            print(f"‚ùå [Device: {device}] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è [Device: {device}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏£‡∏µ‡πÄ‡∏Å‡∏°: {e}")
        return False

def restart_with_clean(device):
    """Restart game with complete data cleaning"""
    try:
        log(f"üîÑ {device}: Performing clean restart...")
        
        # 1. Force stop the game
        adb_shell(device, "am force-stop com.linecorp.LGRGS")
        time.sleep(2)
        
        # 2. Clear all game data
        adb_shell(device, "pm clear com.linecorp.LGRGS")
        time.sleep(3)
        
        # 3. Restart the game
        adb_shell(device, "monkey -p com.linecorp.LGRGS -c android.intent.category.LAUNCHER 1")
        time.sleep(15)
        
        # 4. Verify restart
        if check_app_status(device):
            log(f"‚úÖ {device}: Clean restart successful")
            re_id(device,isFirstTime=True)
            return True
            
        log(f"‚ùå {device}: Clean restart failed")
        return False
    except Exception as e:
        log(f"‚ùå {device}: Clean restart error: {str(e)}")
        return False

def restart_all_emulators():
    """
    ‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    emulators = get_emulators()
    if not emulators:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Emulator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
        return
    
    threads = []
    for device in emulators:
        thread = threading.Thread(
            target=restart_game,
            args=(device,),
            name=f"RestartThread-{device}"
        )
        threads.append(thread)
        thread.start()
        time.sleep(1)  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡∏ö‡∏ô {len(emulators)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ò‡∏£‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    for thread in threads:
        thread.join()
    
    print("‚úÖ ‡∏£‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

# debug
def debug_pixel(device):
    print(f"\nüîç ‡πÄ‡∏£‡∏¥‡πà‡∏° Debug ‡∏Ñ‡πà‡∏≤ Pixel ‡∏ö‡∏ô {device}")
    
    # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ img ‡πÅ‡∏ö‡∏ö global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô mouse_callback
    img = screencap(device)
    
    # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡πÉ‡∏´‡πâ mouse_callback ‡∏ú‡πà‡∏≤‡∏ô param
    def mouse_callback(event, x, y, flags, param):
        img = param[0]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ img ‡∏à‡∏≤‡∏Å param[0]
        if event == cv2.EVENT_LBUTTONDOWN:
            pixel = img[y, x]
            print(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({x}, {y}) | ‡∏Ñ‡πà‡∏≤ BGR: {pixel}")
            print(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: 'new_position': ({x}, {y})")
            
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
            img = screencap(device)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï param ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
            param[0] = img

    cv2.namedWindow('Debug Pixel', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('Debug Pixel', 800, 600)
    
    # ‡πÉ‡∏ä‡πâ param ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ mouse_callback
    cv2.setMouseCallback('Debug Pixel', mouse_callback, param=[img])
    
    while True:
        cv2.imshow('Debug Pixel', img)
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
    
    cv2.destroyAllWindows()
    print(f"üîö ‡∏à‡∏ö‡∏Å‡∏≤‡∏£ Debug ‡∏ö‡∏ô {device}")

## Gui Function
def log(msg):
    output_text.config(state='normal')
    output_text.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')} - {msg}\n")
    output_text.see(tk.END)
    output_text.config(state='disabled')

def start_bot_thread():
    thread = threading.Thread(target=start_bot, daemon=True)
    thread.start()

def start_bot():
    global running, monitoring_active, isFound
    running = True
    monitoring_active = True
    isFound = False  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó...")
    run_all_independent()

def stop_bot():
    global running, monitoring_active
    running = False
    monitoring_active = False  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ monitor ‡∏î‡πâ‡∏ß‡∏¢
    log("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡πâ‡∏ß")
    time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ thread ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô



def toggle_resource():
    global isLoadResource
    isLoadResource = not load_resource_var.get()
    log(f"üîÑ Load Resource: {not isLoadResource}")

def toggle_7days():
    """Toggle 7-day rewards"""
    global skip_7days
    skip_7days = not skip_7days_var.get()
    log(f"üîÑ 7-day rewards set to: {not skip_7days}")

def toggle_random_summon():
    """Toggle random summon"""
    global random_summon
    random_summon = random_summon_var.get()
    log(f"üîÑ Random summon set to: {random_summon}")

def calculate_summon_times():
    global summon_times
    try:
        text = ticket_input.get()
        ticket_count = int(text) if text else 0
        summon_times = ticket_count // 5
        log(f"üéü ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏°‡∏°‡∏≠‡∏ô: {summon_times} (‡∏à‡∏≤‡∏Å {ticket_count} ‡∏ï‡∏±‡πã‡∏ß)")
    except ValueError:
        log("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß")
        summon_times = 0

def choose_save_directory():
    path = filedialog.askdirectory(title="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ü PREF KEY")
    if path:
        save_directory_path.set(path)
        messagebox.showinfo("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"üìÇ ‡∏à‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà:\n{path}")
    else:
        messagebox.showinfo("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‚ùó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")

def add_error_handling_gui():
    error_frame = ttk.LabelFrame(main_frame, text="üõë Error Handling", padding=10)
    error_frame.grid(row=5, column=0, columnspan=3, sticky="ew", pady=5)
    
    ttk.Label(error_frame, 
             text="Automatically handles:\n"
                 "- Terms agreement errors\n"
                 "- Authentication failures\n"
                 "- Internet connection errors").pack()

def update_target_characters():
    global target_characters
    input_text = target_entry.get()
    if input_text:
        # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        target_characters = [name.strip().upper() for name in input_text.split(",") if name.strip()]
        log(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {', '.join(target_characters)}")
    else:
        log("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")

def show_help():
    """Show help message"""
    help_text = """
    ‚ú® Theprachaball Bot Help ‚ú®
    
    1. Connect your emulators via ADB
    2. Configure settings:
       - Ticket count: Number of gacha tickets available
       - Target characters: Comma-separated list of characters to look for
       - Excluded devices: Comma-separated list of emulators to exclude
    3. Toggle options as needed:
       - Load resources: Whether to load game resources
       - 7-day rewards: Whether to collect 7-day login rewards
       - Random summon: Whether to perform random summons
       - Tutorial mode: Whether to play through tutorial
    4. Select a save directory for PREF KEY files
    5. Click "Start Bot" to begin
    
    Troubleshooting:
    - If the bot gets stuck, check the log for errors
    - Make sure ADB is properly configured
    - Ensure emulators are visible in 'adb devices'
    - For gray/black screens, try restarting the emulator
    
    Hotkeys:
    - F1: Show this help
    - Ctrl+Q: Quit application
    """
    
    messagebox.showinfo("Help", help_text)

def update_excluded_devices():
    """Update excluded devices list"""
    global excluded_devices
    input_text = excluded_devices_entry.get()
    if input_text:
        excluded_devices = [device.strip() for device in input_text.split(",") if device.strip()]
        log(f"üö´ Excluded devices updated: {', '.join(excluded_devices)}")
    else:
        excluded_devices = []
        log("üîÑ No devices excluded")

def toggle_monitoring():
    global monitoring_active
    monitoring_active = monitoring_var.get()
    log(f"üì° Monitoring {'‡πÄ‡∏õ‡∏¥‡∏î' if monitoring_active else '‡∏õ‡∏¥‡∏î'}")

    
def update_global_delay(*args):
    global delay
    try:
        delay = int(delay_var.get())
        log(f"‚è±Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Delay: {delay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    except ValueError:
        log("‚ùå Delay ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°")

# ===== ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI =====
root = tk.Tk()
root.title("‚ú® Theprachaball Bot Controller ‚ú®")
root.geometry("800x900")
root.configure(bg="#f0f4f8")

# Variables
save_directory_path = tk.StringVar()
delay_var = tk.StringVar()
load_resource_var = tk.BooleanVar(value=True)
skip_7days_var = tk.BooleanVar(value=True)
random_summon_var = tk.BooleanVar(value=True)
tutorial_mode_var = tk.BooleanVar(value=True)
monitoring_var = tk.BooleanVar(value=True)
delay_var.set(5)  # default value

# Fonts
default_font = tkfont.Font(family="Segoe UI", size=11)
heading_font = tkfont.Font(family="Segoe UI", size=14, weight="bold")

# Styles
style = ttk.Style()
style.theme_use("clam")

style.configure("TButton",
    font=default_font,
    padding=6,
    relief="flat",
    background="#4CAF50",
    foreground="white"
)
style.map("TButton",
    background=[("active", "#45a049"), ("disabled", "#a5d6a7")]
)

style.configure("TCheckbutton",
    background="#f0f4f8",
    font=default_font
)

style.configure("TLabel",
    background="#f0f4f8",
    font=default_font
)

# Main layout
main_frame = ttk.Frame(root)
main_frame.pack(fill='both', expand=True, padx=10, pady=10)

# Header
header_label = ttk.Label(main_frame, text="üéÆ Theprachaball Bot Control Panel", font=heading_font, foreground="#2c3e50")
header_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))

# Control buttons
control_frame = ttk.Frame(main_frame)
control_frame.grid(row=1, column=0, columnspan=3, pady=5)

start_btn = ttk.Button(control_frame, text="‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó", command=start_bot_thread)
start_btn.grid(row=0, column=0, padx=5)

stop_btn = ttk.Button(control_frame, text="‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó", command=stop_bot)
stop_btn.grid(row=0, column=1, padx=5)

help_btn = ttk.Button(control_frame, text="‚ùì ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", command=show_help)
help_btn.grid(row=0, column=2, padx=5)

# Settings frame
settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", padding=10)
settings_frame.grid(row=2, column=0, columnspan=3, sticky="ew", pady=5)

# Resource loading
load_resource_cb = ttk.Checkbutton(settings_frame, text="‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", variable=load_resource_var, command=toggle_resource)
load_resource_cb.grid(row=0, column=0, sticky="w", pady=2)

# 7-day rewards
skip_7days_cb = ttk.Checkbutton(settings_frame, text="‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß 7 ‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", variable=skip_7days_var, command=toggle_7days)
skip_7days_cb.grid(row=1, column=0, sticky="w", pady=2)

# Random summon
random_summon_cb = ttk.Checkbutton(settings_frame, text="‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", variable=random_summon_var, command=toggle_random_summon)
random_summon_cb.grid(row=2, column=0, sticky="w", pady=2)

# Ticket input
ticket_frame = ttk.Frame(settings_frame)
ticket_frame.grid(row=4, column=0, sticky="w", pady=5)

ticket_label = ttk.Label(ticket_frame, text="üé´ ‡∏ï‡∏±‡πã‡∏ß:")
ticket_label.grid(row=0, column=0, padx=(0, 5))

ticket_input = ttk.Entry(ticket_frame, font=default_font, width=10)
ticket_input.grid(row=0, column=1)
ticket_input.insert(0, "0")
ticket_input.bind("<KeyRelease>", lambda event: calculate_summon_times())

# Target characters
target_frame = ttk.Frame(settings_frame)
target_frame.grid(row=5, column=0, sticky="w", pady=5)

target_label = ttk.Label(target_frame, text="üéØ ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤:")
target_label.grid(row=0, column=0, padx=(0, 5))

target_entry = ttk.Entry(target_frame, font=default_font, width=30)
target_entry.grid(row=0, column=1, padx=(0, 5))
target_entry.insert(0, "SENKU")

update_target_btn = ttk.Button(target_frame, text="‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï", command=update_target_characters)
update_target_btn.grid(row=0, column=2)

# Excluded devices
excluded_frame = ttk.Frame(settings_frame)
excluded_frame.grid(row=6, column=0, sticky="w", pady=5)

excluded_label = ttk.Label(excluded_frame, text="üö´ ‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏ó:")
excluded_label.grid(row=0, column=0, padx=(0, 5))

excluded_devices_entry = ttk.Entry(excluded_frame, font=default_font, width=30)
excluded_devices_entry.grid(row=0, column=1, padx=(0, 5))

update_excluded_btn = ttk.Button(excluded_frame, text="‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï", command=update_excluded_devices)
update_excluded_btn.grid(row=0, column=2)

delay_frame = ttk.Frame(settings_frame)
delay_frame.grid(row=3, column=1, sticky="w", pady=5, padx=10)

delay_label = ttk.Label(delay_frame, text="‚è±Ô∏è ‡πÄ‡∏î‡πÄ‡∏•‡∏¢‡πå (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):")
delay_label.grid(row=0, column=0, padx=(0, 5))

delay_entry = ttk.Entry(delay_frame, font=default_font, width=10, textvariable=delay_var, justify="center")
delay_entry.grid(row=0, column=1)
delay_var.trace_add("write", update_global_delay)

# Save directory
save_dir_frame = ttk.Frame(main_frame)
save_dir_frame.grid(row=3, column=0, columnspan=3, pady=5)

choose_dir_btn = ttk.Button(save_dir_frame, text="üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ü", command=choose_save_directory)
choose_dir_btn.grid(row=0, column=0, padx=5)

chosen_dir_label = ttk.Label(save_dir_frame, textvariable=save_directory_path, foreground="gray", wraplength=400)
chosen_dir_label.grid(row=1, column=0, pady=(0, 10))

# Log output
log_frame = ttk.LabelFrame(main_frame, text="üìã Log", padding=10)
log_frame.grid(row=4, column=0, columnspan=3, sticky="nsew", pady=5)


output_text = scrolledtext.ScrolledText(log_frame, height=20, font=("Consolas", 10), state='disabled', background="#ecf0f1")
output_text.pack(fill='both', expand=True)

# Configure grid weights
main_frame.grid_rowconfigure(4, weight=1)
main_frame.grid_columnconfigure(0, weight=1)

# Key bindings
root.bind("<F1>", lambda event: show_help())
root.bind("<Control-q>", lambda event: root.quit())

# Start monitoring thread
monitor_thread = threading.Thread(target=monitor_devices, daemon=True)
monitor_thread.start()

monitoring_cb = ttk.Checkbutton(
    settings_frame,
    text="‡∏î‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏≠‡∏ó",
    variable=monitoring_var,
    command=toggle_monitoring
)
monitoring_cb.grid(row=3, column=0, sticky="w", pady=2)
# Main loop
root.mainloop()